//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.10
//
// <auto-generated>
//
// Generated from file `Agent.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//


using _System = global::System;

#pragma warning disable 1591

namespace Experica
{
    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface Agent : global::Ice.Object, AgentOperations_
    {
    }
}

namespace Experica
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_Agent_getEnvBool(bool ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_Agent_setEnvBool(bool ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_Agent_getEnvFloat(float ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_Agent_setEnvFloat(bool ret);
}

namespace Experica
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public interface AgentPrx : global::Ice.ObjectPrx
    {
        bool getEnvBool(string name, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<bool> getEnvBoolAsync(string name, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_Agent_getEnvBool> begin_getEnvBool(string name, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_getEnvBool(string name, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_getEnvBool(string name, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        bool end_getEnvBool(global::Ice.AsyncResult asyncResult);

        bool setEnvBool(string name, bool value, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<bool> setEnvBoolAsync(string name, bool value, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_Agent_setEnvBool> begin_setEnvBool(string name, bool value, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_setEnvBool(string name, bool value, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_setEnvBool(string name, bool value, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        bool end_setEnvBool(global::Ice.AsyncResult asyncResult);

        float getEnvFloat(string name, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<float> getEnvFloatAsync(string name, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_Agent_getEnvFloat> begin_getEnvFloat(string name, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_getEnvFloat(string name, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_getEnvFloat(string name, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        float end_getEnvFloat(global::Ice.AsyncResult asyncResult);

        bool setEnvFloat(string name, float value, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<bool> setEnvFloatAsync(string name, float value, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_Agent_setEnvFloat> begin_setEnvFloat(string name, float value, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_setEnvFloat(string name, float value, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_setEnvFloat(string name, float value, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        bool end_setEnvFloat(global::Ice.AsyncResult asyncResult);
    }
}

namespace Experica
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public interface AgentOperations_
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        bool getEnvBool(string name, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        bool setEnvBool(string name, bool value, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        float getEnvFloat(string name, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        bool setEnvFloat(string name, float value, global::Ice.Current current = null);
    }
}

namespace Experica
{
    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    [global::System.Serializable]
    public sealed class AgentPrxHelper : global::Ice.ObjectPrxHelperBase, AgentPrx
    {
        public AgentPrxHelper()
        {
        }

        public AgentPrxHelper(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
        {
        }

        #region Synchronous operations

        public bool getEnvBool(string name, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_getEnvBoolAsync(name, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public bool setEnvBool(string name, bool value, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_setEnvBoolAsync(name, value, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public float getEnvFloat(string name, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_getEnvFloatAsync(name, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public bool setEnvFloat(string name, float value, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_setEnvFloatAsync(name, value, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        #endregion

        #region Async Task operations

        public global::System.Threading.Tasks.Task<bool> getEnvBoolAsync(string name, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_getEnvBoolAsync(name, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<bool> _iceI_getEnvBoolAsync(string iceP_name, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_getEnvBool_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<bool>(progress, cancel);
            _iceI_getEnvBool(iceP_name, context, synchronous, completed);
            return completed.Task;
        }

        private const string _getEnvBool_name = "getEnvBool";

        private void _iceI_getEnvBool(string iceP_name, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<bool>(completed);
            outAsync.invoke(
                _getEnvBool_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeString(iceP_name);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    bool ret;
                    ret = istr.readBool();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<bool> setEnvBoolAsync(string name, bool value, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_setEnvBoolAsync(name, value, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<bool> _iceI_setEnvBoolAsync(string iceP_name, bool iceP_value, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_setEnvBool_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<bool>(progress, cancel);
            _iceI_setEnvBool(iceP_name, iceP_value, context, synchronous, completed);
            return completed.Task;
        }

        private const string _setEnvBool_name = "setEnvBool";

        private void _iceI_setEnvBool(string iceP_name, bool iceP_value, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<bool>(completed);
            outAsync.invoke(
                _setEnvBool_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeString(iceP_name);
                    ostr.writeBool(iceP_value);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    bool ret;
                    ret = istr.readBool();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<float> getEnvFloatAsync(string name, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_getEnvFloatAsync(name, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<float> _iceI_getEnvFloatAsync(string iceP_name, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_getEnvFloat_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<float>(progress, cancel);
            _iceI_getEnvFloat(iceP_name, context, synchronous, completed);
            return completed.Task;
        }

        private const string _getEnvFloat_name = "getEnvFloat";

        private void _iceI_getEnvFloat(string iceP_name, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<float>(completed);
            outAsync.invoke(
                _getEnvFloat_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeString(iceP_name);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    float ret;
                    ret = istr.readFloat();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<bool> setEnvFloatAsync(string name, float value, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_setEnvFloatAsync(name, value, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<bool> _iceI_setEnvFloatAsync(string iceP_name, float iceP_value, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_setEnvFloat_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<bool>(progress, cancel);
            _iceI_setEnvFloat(iceP_name, iceP_value, context, synchronous, completed);
            return completed.Task;
        }

        private const string _setEnvFloat_name = "setEnvFloat";

        private void _iceI_setEnvFloat(string iceP_name, float iceP_value, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<bool>(completed);
            outAsync.invoke(
                _setEnvFloat_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeString(iceP_name);
                    ostr.writeFloat(iceP_value);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    bool ret;
                    ret = istr.readBool();
                    return ret;
                });
        }

        #endregion

        #region Asynchronous operations

        public global::Ice.AsyncResult<Callback_Agent_getEnvBool> begin_getEnvBool(string name, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_getEnvBool(name, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_getEnvBool(string name, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_getEnvBool(name, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_getEnvBool(string name, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_getEnvBool(name, context, callback, cookie, false);
        }

        public bool end_getEnvBool(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getEnvBool_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<bool>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Agent_getEnvBool> begin_getEnvBool(string iceP_name, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_getEnvBool_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Agent_getEnvBool, bool>(
                (Callback_Agent_getEnvBool cb, bool ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _getEnvBool_name, cookie, completedCallback);
            _iceI_getEnvBool(iceP_name, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Agent_setEnvBool> begin_setEnvBool(string name, bool value, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_setEnvBool(name, value, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_setEnvBool(string name, bool value, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_setEnvBool(name, value, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_setEnvBool(string name, bool value, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_setEnvBool(name, value, context, callback, cookie, false);
        }

        public bool end_setEnvBool(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _setEnvBool_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<bool>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Agent_setEnvBool> begin_setEnvBool(string iceP_name, bool iceP_value, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_setEnvBool_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Agent_setEnvBool, bool>(
                (Callback_Agent_setEnvBool cb, bool ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _setEnvBool_name, cookie, completedCallback);
            _iceI_setEnvBool(iceP_name, iceP_value, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Agent_getEnvFloat> begin_getEnvFloat(string name, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_getEnvFloat(name, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_getEnvFloat(string name, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_getEnvFloat(name, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_getEnvFloat(string name, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_getEnvFloat(name, context, callback, cookie, false);
        }

        public float end_getEnvFloat(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getEnvFloat_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<float>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Agent_getEnvFloat> begin_getEnvFloat(string iceP_name, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_getEnvFloat_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Agent_getEnvFloat, float>(
                (Callback_Agent_getEnvFloat cb, float ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _getEnvFloat_name, cookie, completedCallback);
            _iceI_getEnvFloat(iceP_name, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Agent_setEnvFloat> begin_setEnvFloat(string name, float value, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_setEnvFloat(name, value, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_setEnvFloat(string name, float value, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_setEnvFloat(name, value, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_setEnvFloat(string name, float value, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_setEnvFloat(name, value, context, callback, cookie, false);
        }

        public bool end_setEnvFloat(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _setEnvFloat_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<bool>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Agent_setEnvFloat> begin_setEnvFloat(string iceP_name, float iceP_value, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_setEnvFloat_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Agent_setEnvFloat, bool>(
                (Callback_Agent_setEnvFloat cb, bool ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _setEnvFloat_name, cookie, completedCallback);
            _iceI_setEnvFloat(iceP_name, iceP_value, context, synchronous, completed);
            return completed;
        }

        #endregion

        #region Checked and unchecked cast operations

        public static AgentPrx checkedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            AgentPrx r = b as AgentPrx;
            if((r == null) && b.ice_isA(ice_staticId()))
            {
                AgentPrxHelper h = new AgentPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static AgentPrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            AgentPrx r = b as AgentPrx;
            if((r == null) && b.ice_isA(ice_staticId(), ctx))
            {
                AgentPrxHelper h = new AgentPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static AgentPrx checkedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId()))
                {
                    AgentPrxHelper h = new AgentPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static AgentPrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId(), ctx))
                {
                    AgentPrxHelper h = new AgentPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static AgentPrx uncheckedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            AgentPrx r = b as AgentPrx;
            if(r == null)
            {
                AgentPrxHelper h = new AgentPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static AgentPrx uncheckedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            AgentPrxHelper h = new AgentPrxHelper();
            h.iceCopyFrom(bb);
            return h;
        }

        private static readonly string[] _ids =
        {
            "::Experica::Agent",
            "::Ice::Object"
        };

        public static string ice_staticId()
        {
            return _ids[0];
        }

        #endregion

        #region Marshaling support

        public static void write(global::Ice.OutputStream ostr, AgentPrx v)
        {
            ostr.writeProxy(v);
        }

        public static AgentPrx read(global::Ice.InputStream istr)
        {
            global::Ice.ObjectPrx proxy = istr.readProxy();
            if(proxy != null)
            {
                AgentPrxHelper result = new AgentPrxHelper();
                result.iceCopyFrom(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }
}

namespace Experica
{
    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public abstract class AgentDisp_ : global::Ice.ObjectImpl, Agent
    {
        #region Slice operations

        public abstract bool getEnvBool(string name, global::Ice.Current current = null);

        public abstract bool setEnvBool(string name, bool value, global::Ice.Current current = null);

        public abstract float getEnvFloat(string name, global::Ice.Current current = null);

        public abstract bool setEnvFloat(string name, float value, global::Ice.Current current = null);

        #endregion

        #region Slice type-related members

        private static readonly string[] _ids =
        {
            "::Experica::Agent",
            "::Ice::Object"
        };

        public override bool ice_isA(string s, global::Ice.Current current = null)
        {
            return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids(global::Ice.Current current = null)
        {
            return _ids;
        }

        public override string ice_id(global::Ice.Current current = null)
        {
            return _ids[0];
        }

        public static new string ice_staticId()
        {
            return _ids[0];
        }

        #endregion

        #region Operation dispatch

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_getEnvBool(Agent obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            string iceP_name;
            iceP_name = istr.readString();
            inS.endReadParams();
            var ret = obj.getEnvBool(iceP_name, current);
            var ostr = inS.startWriteParams();
            ostr.writeBool(ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_setEnvBool(Agent obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            string iceP_name;
            bool iceP_value;
            iceP_name = istr.readString();
            iceP_value = istr.readBool();
            inS.endReadParams();
            var ret = obj.setEnvBool(iceP_name, iceP_value, current);
            var ostr = inS.startWriteParams();
            ostr.writeBool(ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_getEnvFloat(Agent obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            string iceP_name;
            iceP_name = istr.readString();
            inS.endReadParams();
            var ret = obj.getEnvFloat(iceP_name, current);
            var ostr = inS.startWriteParams();
            ostr.writeFloat(ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_setEnvFloat(Agent obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            string iceP_name;
            float iceP_value;
            iceP_name = istr.readString();
            iceP_value = istr.readFloat();
            inS.endReadParams();
            var ret = obj.setEnvFloat(iceP_name, iceP_value, current);
            var ostr = inS.startWriteParams();
            ostr.writeBool(ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        private static readonly string[] _all =
        {
            "getEnvBool",
            "getEnvFloat",
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping",
            "setEnvBool",
            "setEnvFloat"
        };

        public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return iceD_getEnvBool(this, inS, current);
                }
                case 1:
                {
                    return iceD_getEnvFloat(this, inS, current);
                }
                case 2:
                {
                    return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                }
                case 3:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                }
                case 4:
                {
                    return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                }
                case 5:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                }
                case 6:
                {
                    return iceD_setEnvBool(this, inS, current);
                }
                case 7:
                {
                    return iceD_setEnvFloat(this, inS, current);
                }
            }

            global::System.Diagnostics.Debug.Assert(false);
            throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        #endregion
    }
}
